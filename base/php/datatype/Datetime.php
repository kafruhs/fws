<?php
/**
 * Created by PhpStorm.
 * User: Alex
 * Date: 13.01.2015
 * Time: 07:10
 */

class base_datatype_Datetime extends base_datatype_Numeric
{
    /**
     * @param base_date_model_DateTime $value
     * @return mixed
     */
    public function toExternal($value)
    {
        if ($value instanceof base_date_model_DateTime) {
            return $value->display();
        }
        return null;
    }

    protected function validateValue($value)
    {
        if (empty($value)) {
            return;
        }
//        echo 'pregmatch' . PHP_EOL;
//        if (preg_match("~^\d{4}-\d{2}-\d{2}.\d{2}.\d{2}.{2,10}$~", $value) || preg_match("~^\d{2}\.\d{2}\.\d{4}.\d{2}.\d{2}.\d{2}$~", $value)) {
//            return;
//        }
//        throw new base_exception_Validation(TMS(base_exception_Validation::WRONG_DATETIME_FORMAT));
    }

    public function getEmptyValue()
    {
        return parent::getEmptyValue(); // TODO: Change the autogenerated stub
    }

    public function toInternalValue($value)
    {
        if (!$value instanceof DateTime && !$value instanceof base_date_model_Datetime) {
            try {
                $value = new DateTime($value);
            } catch (Exception $e) {
                $value = DateTime::createFromFormat('d.m.Y H:i', $value);
            }
        }
        if ($value instanceof base_date_model_DateTime) {
            return $value;
        }
        return new base_date_model_DateTime($value);
    }

    /**
     * @param base_date_model_DateTime $value
     * @return mixed|void
     */
    public function toDB($value)
    {
        return $value->toDB();
    }

    /**
     * @return base_js_ColModelElement
     */
    public function getJSColModelElement()
    {
        $colModel = parent::getJSColModelElement();
        $colModel->setFormatter(base_js_ColModelElement::FORMATTER_DATE)
            ->setEditableTrue()
            ->setEdittype(base_js_ColModelElement::EDITTYPE_DATE);
        return $colModel;
    }
}